COMMANDS
    Log in:
        mongosh "mongodb+srv://sandbox.ovvnhvg.mongodb.net/<database name>" --apiVersion 1 --username mongo_learner

    Show all databases:
        show dbs

    Select a specific database:
        use <database>

    Show all collections in a database:
        show collections

QUERIES
    FIND
        Get all matching documents in <collection>:
            db.<collection>.find({"state": "NY"})
        
        Get all matching documents from multiple fields:
            db.<collection>.find({"_id": 1, "sandwich": 1})

        Get one random document from <collection>:
            db.<collection>.findOne()

    INSERT
        Insert a single document:
            db.<collection>.insert({ "sandwich": 1 })
        
        Insert multiple documents:
            db.<collection>.insert([{ "_id": 1, "sandwich": 1 }, {"_id": 2, "sandwich": 5}, {"_id": 3, "sandwich": 1}])

        Insert multiple documents with no order:
            db.<collection>.insert([{ "_id": 4, "sandwich": 1 }, {"_id": 4, "sandwich": 5}, {"_id": 5, "sandwich": 1}], {"ordered": false})

    UPDATE
        Update a single value with $set:
            db.<collection>.updateOne({ "zip": "12534" }, { "$set": { "pop": 17630 } })

        Update multiple values with $inc:
            db.<collection>.updateMany({ "city": "HUDSON" }, { "$inc": { "pop": 10 } })

        Update a single value with $push:
            (Creates or modifies an array)
            db.<collection>.updateOne({ "zip": "12534" }, { "$push": { "planet": "earth"}})
    
    DELETE
        Delete a single document:
            db.<collection>.deleteOne({ "_id": 1 })

        Delete multiple documents:
            db.<collection>.deleteMany({ "sandwich": 1 })

        Delete a single field with $unset:
            db.<collection>.updateOne({"student_id": 6, "class_id": 262}, {"$unset": {"class_id": ""}})


OPERATORS
    Equal to (=) operator:
        db.<collection>.find({ "tripduration": { "$eq" : 326222 }})

        (This operator is impelented by default when no other operator is used)
        db.<collection>.find({ "tripduration": 326222})

    Not equal to (!=) operator:
        db.<collection>.find({ "birth year": 1975, "tripduration": {"$ne": 440}})

    Less than (<) operator:
        db.<collection>.find({ "tripduration": { "$lt" : 62 }})

    Less than or equal (<=) operator:
        db.<collection>.find({ "tripduration": { "$lte" : 61 }})
    
    Greater than (>) operator:
        db.<collection>.find({ "tripduration": { "$gt" : 326221 }})
    
    Greater than or equal (>=) operator:
        db.<collection>.find({ "tripduration": { "$gte" : 326222 }})


FUNCTIONS
    Return number of matching documents:
        db.<collection>.find({"state": "NY"}).count()

    Print the output prettier:
        db.<collection>.find({"state": "NY"}).pretty()

    Drop collection:
        db.<collection>.drop()

GOTCHAS
    INSERT
        1) While inserting, using {"ordered": false} prevents the query from stopping in case of a duplicate error.
        2) Inserting into a non-existing collection creates a new collection with that name.
    
    UPDATE
        1) While updating a document, setting a specific field to a new value will implicitly create that field if it doesn't exist.
